# -*- coding: utf-8 -*-
"""
Tools of interaction with database (mongodb).

Created on 07/12/21 11:40 AM

@file: dbs_utils.py
@author: hl <hl@hengaigaoke.com>
@copyright(C), 2020-2022, Hengai Gaoke Tech. Co. Ltd.
"""

import os, sys
import logging
import pickle
import mongoengine as me
import bson.binary
import joblib

from io import StringIO, BytesIO
from enum import Enum

# 创建一个logger
logger = logging.getLogger('root')
logging.basicConfig(format='%(asctime)s - %(pathname)s[line:%(lineno)d] '
                           '- %(levelname)s: %(message)s', level=logging.INFO)

# me.connect(db='algorithmdb', host='127.0.0.1', port=27017, alias='default') # local host
me.connect(db='algorithmdb', host='127.0.0.1', port=27017, username='algdb_root', password='123456', alias='default') # local host in container
# mongodb://root:dongni%24mongodb%40211022@dds-2ze1843ca7f0dfc4118470.mongodb.rds.aliyuncs.com:3717
#me.connect(db='algorithmdb', host='dds-2ze1843ca7f0dfc4118470.mongodb.rds.aliyuncs.com', port=3717, username='root', password='dongni$mongodb@211022', alias='default') # 内网地址
# me.connect(db='algorithmdb', host='dds-2ze1843ca7f0dfc4118470.mongodb.rds.aliyuncs.com', port=3717, username='algorithmdb_root', password='algorithmdb#mongodb$donni@210817', alias='default') # 内网地址
# mongodb://algorithm_root:algorithmdb%23mongodb%24donni%40210817@dds-2ze1843ca7f0dfc4118470.mongodb.rds.aliyuncs.com:3717

# me.connect(db='algorithmdb', host='dds-2ze1843ca7f0dfc4-pub.mongodb.rds.aliyuncs.com', port=3717, username='emo_root', password='dongni$mongodb@211022', alias='default') # 外网地址

class Emotion(Enum):
    ANGRY = 0
    CALM = 1
    SURPRISE = 2
    FEAR = 3
    SORROW = 4
    DISGUST = 5
    JOY = 6

class Level(Enum):
    VERYWEAK = 1
    WEAKER = 2
    MEDIUM = 3
    STRONGER = 4
    VERYSTRONG = 5

class ModelType(Enum):
    EMOTION = 'emo'
    BLOODPRESSURE = 'bp'
    SLEEP = 'sleep'

class ModelMethod(Enum):
    SVM = 'svm'
    LDA = 'lda'
    RF = 'rf'       # random forest
    NB = 'nb'       # naive bayes
    MLP = 'mlp'     # multilayer perception
    KNN = 'knn'     # k-nearest neighber


# emotion experiment data
class EmotionExperData(me.Document):
    """
    # Collection: emotion_exper_data
    | field        | type     | optional | isPK     | isFK     | comment                              |
    | ------------ | -------- | -------- | -------- | -------- | ------------------------------------ |
    | _id(data_id) | string   | true     | true     | false    | ID (auto generated by mongodb)           |
    | data_file    | file     | true     | false    | false    | file stored ppg data                     |
    | begin_time   | Datetime | true     | false    | false    | 采集开始时间                              |
    | end_time     | Datetime | true     | false    | false    | 采集结束时间                              |
    | emo_category | Enum     | true     | false    | false    | 情绪类型(0-6)                             |
    | emo_level    | Enum     | true     | false    | false    | 情绪强度(1-5)                             |
    | subject_info | dict     | false    | false    | false    | information of subject                   |
    | experimenter | string   | true     | false    | false    | the experimenter                         |
    | exper_device | string   | true     | false    | true     | the imei of experimental device          |
    | stimulus_info| dict     | true     | false    | true     | information of stimulus (video or music) |
    """
    meta = {
        'db_alias': 'default'
    }
    data_file = me.fields.FileField(required=True)
    begin_time = me.fields.DateTimeField(required=True)
    end_time = me.fields.DateTimeField(required=True)
    emo_category = me.fields.EnumField(Emotion, required=True)
    emo_level = me.fields.EnumField(Level, reqiured=True)
    subject_info = me.fields.DictField()
    experimenter = me.fields.StringField(max_length=20)
    exper_device = me.fields.StringField(reqiured=True, max_length=20)
    stimulus_info = me.fields.DictField()


# blood pressure experiment data
class BpExperData(me.Document):
    """
    # Collection: bp_exper_data
    | field        | type     | optional | isPK     | isFK     | comment                              |
    | ------------ | -------- | -------- | -------- | -------- | ------------------------------------ |
    | _id(data_id) | string   | true     | true     | false    | ID (auto generated by mongodb)           |
    | data_file    | file     | true     | false    | false    | file stored ppg data                     |
    | begin_time   | Datetime | true     | false    | false    | 采集开始时间                              |
    | end_time     | Datetime | true     | false    | false    | 采集结束时间                              |
    | dbp_value    | int      | true     | false    | false    | diastolic blood pressure (marked)        |
    | sbp_value    | int      | true     | false    | false    | systolic blood pressure (marked)         |
    | hypertension | boolean  | true     | false    | false    | wether have hypertension                 |
    | hypotensor   | boolean  | true     | false    | false    | wether eating hypotensor                 |
    | subject_info | dict     | false    | false    | false    | information of subject                   |
    | experimenter | string   | true     | false    | false    | the experimenter                         |
    | exper_device | string   | true     | false    | true     | the imei of experimental device          |
    """
    meta = {
        'db_alias': 'default'
    }
    data_file = me.fields.FileField(required=True)
    begin_time = me.fields.DateTimeField(required=True)
    end_time = me.fields.DateTimeField(required=True)
    dbp_value = me.fields.IntField(min_value=60, max_value=200, required=True)
    sbp_value = me.fields.IntField(min_value=60, max_value=200, required=True)
    hypertension = me.fields.BooleanField(required=True)
    hypotensor = me.fields.BooleanField(reqiured=True)
    subject_info = me.fields.DictField()
    experimenter = me.fields.StringField(max_length=20)
    exper_device = me.fields.StringField(reqiured=True, max_length=20)


# sleep experiment data
class SleepExperData(me.Document):
    """
    # Collection: sleep_exper_data
    | field        | type     | optional | isPK     | isFK     | comment                              |
    | ------------ | -------- | -------- | -------- | -------- | ------------------------------------ |
    | _id(data_id) | string   | true     | true     | false    | ID (auto generated by mongodb)           |
    | data_file    | file     | true     | false    | false    | file stored ppg data                     |
    | begin_time   | Datetime | true     | false    | false    | 采集开始时间                              |
    | end_time     | Datetime | true     | false    | false    | 采集结束时间                              |
    | sleep_state  | int      | true     | false    | false    | 0: wake, 1:sleep                         |
    | insomnia     | boolean  | true     | false    | false    | wether have insomnia                     |
    | sleepwalk    | boolean  | true     | false    | false    | wether have sleepwalk                    |
    | subject_info | dict     | false    | false    | false    | information of subject                   |
    | experimenter | string   | true     | false    | false    | the experimenter                         |
    | exper_device | string   | true     | false    | true     | the imei of experimental device          |
    """
    meta = {
        'db_alias': 'default'
    }
    data_file = me.fields.FileField(required=True)
    begin_time = me.fields.DateTimeField(required=True)
    end_time = me.fields.DateTimeField(required=True)
    sleep_state = me.fields.IntField(min_value=60, max_value=200, required=True)
    insomnia = me.fields.BooleanField(required=True)
    sleepwalk = me.fields.BooleanField(reqiured=True)
    subject_info = me.fields.DictField()
    experimenter = me.fields.StringField(max_length=20)
    exper_device = me.fields.StringField(reqiured=True, max_length=20)


class LearnModel(me.Document):
    """
    # Collection: learn_model
    | field        | type     | optional | isPK     | isFK     | comment                              |
    | ------------ | -------- | -------- | -------- | -------- | ------------------------------------ |
    | _id(model_id)| string   | true     | true     | false    | ID (auto generated by mongodb)           |
    | model_name   | string   | false    | false    | false    | name of model                            |
    | model_files  | list     | true     | false    | false    | list of file stored model                |
    | model_type   | Enum     | true     | false    | false    | model type                               |
    | model_method | Enum     | true     | false    | false    | model mothed                             |
    | model_owner  | string   | true     | false    | false    | model owner                              |

    """
    meta = {
        'db_alias': 'default'
    }
    model_name = me.fields.StringField(max_length=20)
    model_file = me.fields.FileField(required=True)
    model_type = me.fields.EnumField(ModelType, required=True)
    model_method = me.fields.EnumField(ModelMethod, reqiured=True)
    model_owner = me.fields.StringField(max_length=20)


def write_model_to_dbs(model_data, name, owner='general', type=ModelType.EMOTION, method=ModelMethod.SVM):
    model = LearnModel()
    model.model_name = name
    model.model_type = ModelType.EMOTION
    model.model_method = ModelMethod.SVM
    model.model_owner = owner
    model.model_file.new_file()
    model.model_file.write(pickle.dumps(model_data))
    model.model_file.close()
    model.save()

def read_model_from_dbs(owner='general', type=ModelType.EMOTION, method=ModelMethod.SVM):
    model = LearnModel.objects(model_owner=owner, 
                               model_type=type, 
                               model_method=method).first()
    #a = model.model_file.content_type
    #model.model_file.seek(0) 
    model_data = model.model_file.read()
    # print(svm_model)

    return pickle.loads(model_data)


### save the models to file
def save_classifer(pca, lda, clf, path):
    for i in range(0, len(pca)):
        joblib.dump(pca[i], path + '/pca' + str(i) + '.m')
    joblib.dump(lda, path + '/lda.m')
    for i in range(0, len(clf)):
        joblib.dump(clf[i], path + '/clf' + str(i) + '.m')

    return 0

# load the model files
def load_classifer(path):
    pca = list()
    for i in range(0, 3):
        pcatmp = joblib.load(path + '/pca' + str(i) + '.m')
        pca.append(pcatmp)
    lda = joblib.load(path + '/lda.m')
    clf = list()
    for i in range(0, 42):
        svm = joblib.load(path + '/clf' + str(i) + '.m')
        clf.append(svm)
    return pca, lda, clf


def load_general_classifer(path):
    global pca_me
    pca_me, lda, clf = load_classifer(path)
    return lda, clf
    # lda = joblib.load(path + '/lda.m')
    # clf = list()
    # for i in range(0, 42):
    #     svm = joblib.load(path + '/clf' + str(i) + '.m')
    #     clf.append(svm)

    # return lda, clf


if __name__ == '__main__':
    ##
    pca, lda, clf = load_classifer('./models/model_excel_aver_6')
    svm_model3 = {'pca': pca, 'lda': lda, 'clf': clf}
    print("load model from file successfully!\n")
    write_model_to_dbs(svm_model3, 'first', 'general')
    print("write to mongdb successfully!\n")
    svm_model2 = read_model_from_dbs('general')
    pca2 = svm_model2['pca']
    lda2 = svm_model2['lda']
    clf2 = svm_model2['clf']

    print("1", svm_model2['pca'])
    print("2", svm_model2['lda'])
    print("3", svm_model2['clf'])
    # save_classifer(pca2, lda2, clf2, './pw_model_out')
    # print("read from mongdb successfully!\n")
